//
//  main.cpp
//
//  cppEdu
//
//  Created by Николай Кутузов on 23.08.2021.
//
//__________________________________________________________________________________
//                                                                                  |
//                           ПИРАМИДАЛЬНАЯ СОРТИРОВКА                               |
//                                                                                  |
//  Пирамидальная сортировка использует бинарное сортирующее дерево или по-другому  |
//  ПИРАМИДУ. Собственно говоря - КУЧУ. Особо про этот вид сортировки говорить      |
//  нечего, он использует асимтотические приимущества двоичного сортирующего дерева.|
//                                                                                  |
//  Дерево с индексами массива:                                                     |
//                                                                                  |
//                 0                                                                |
//             /      \                                                             |
//            1        2                                                            |
//           / \      / \                                                           |
//          3   4    5   6                                                          |
//         / \ / \  /                                                               |
//        7  8 9 10 11                                                              |
//                                                                                  |
//  Предположим, что имеется массив: [ 2 8 11 10 13 1 3 16 14 6 17 23 ]             |
//  Раскидаем элементы по индексам:                                                 |
//                                                                                  |
//                2                                                                 |
//             /      \                                                             |
//            8       11                                                            |
//           / \      / \                                                           |
//         10   13   1   3                                                          |
//         / \ / \  /                                                               |
//       16 14 6 17 23                                                              |
//                                                                                  |
//  Начианем сортировку:                                                            |
//                                                                                  |
//  Пробигаем по индексам, начиная с ПЕРВОГО ( НЕ НУЛЕВОГО! ) и сравниваем с РОДИ-  |
//  ТЕЛЬСКИМИ.                                                                      |
//  for (size_t k = 1; k < arr.size(); ++k) {                                       |
//      size_t currentIndex = k;                                                    |
//      size_t parentIndex = (currentIndex - 1) / 2;                                |
//      while (currentIndex != 0 and arr[currentIndex] > arr[parentIndex]) {        |
//          std::swap(arr[currentIndex], arr[parentIndex]);                         |
//          currentIndex = parentIndex;                                             |
//          parentIndex = (currentIndex - 1) / 2;                                   |
//     }                                                                            |
//  }                                                                               |
//                2                                                                 |
//             /      \                                                             |
//            8       11                                                            |
//               ...            8 > 2 => меняем местами                             |
//                                                                                  |
//                                                                                  |
//                8                                                                 |
//             /      \                                                             |
//            2       11                                                            |
//               ...            11 > 8 => меняем местами                            |
//                                                                                  |
//                11                                                                |
//             /      \                                                             |
//            2        8                                                            |
//           / \      / \                                                           |
//         10   13   1   3                                                          |
//               ...            10 > 2 => меняем местами                            |
//                                                                                  |
//                11                                                                |
//             /      \                                                             |
//            10       8                                                            |
//           / \      / \                                                           |
//         2   13    1   3                                                          |
//               ...            13 > 10 => меняем местами                           |
//                                                                                  |
//                11                                                                |
//             /      \                                                             |
//            13       8                                                            |
//           / \      / \                                                           |
//         2   10    1   3                                                          |
//               ...            13 > 11 => меняем местами                           |
//                                                                                  |
//                13                                                                |
//             /      \                                                             |
//            11       8                                                            |
//           / \      / \                                                           |
//         2   10    1   3                                                          |
//         / \ / \  /                                                               |
//       16 14 6 17 23          16 > 2 => меняем местами                            |
//                                                                                  |
//                13                                                                |
//             /      \                                                             |
//            11       8                                                            |
//           / \      / \                                                           |
//         16   10   1   3                                                          |
//         / \ / \  /                                                               |
//       2 14 6 17 23          16 > 11 => меняем местами                            |
//                                                                                  |
//                13                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         11   10   1   3                                                          |
//         / \ / \  /                                                               |
//        2 14 6 17 23          16 > 13 => меняем местами                           |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            13       8                                                            |
//           / \      / \                                                           |
//         11   10   1   3                                                          |
//         / \ / \  /                                                               |
//        2 14 6 17 23          14 > 11 => меняем местами                           |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            13       8                                                            |
//           / \      / \                                                           |
//         14   10   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23          14 > 13 => меняем местами                           |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            14       8                                                            |
//           / \      / \                                                           |
//         13   10   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23          17 > 10 => меняем местами                           |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            14       8                                                            |
//           / \      / \                                                           |
//         13   17   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23          17 > 14 => меняем местами                           |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            17       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23          17 > 16 => меняем местами                           |
//                                                                                  |
//                17                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23          23 > 1 => меняем местами                            |
//                                                                                  |
//                17                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         13   14   23  3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 1           23 > 8 => меняем местами                            |
//                                                                                  |
//                17                                                                |
//             /      \                                                             |
//            16       23                                                           |
//           / \      / \                                                           |
//         13   14   8   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 1           23 > 17 => меняем местами                           |
//                                                                                  |
//                23                                                                |
//             /      \                                                             |
//            16       17                                                           |
//           / \      / \                                                           |
//         13   14   8   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 1                                                               |
//                                                                                  |
//      Перехдим к циклу:                                                           |
//  for (size_t top = (arr.size() - 1); top > 0; --top) {                           |
//      std::swap(arr[0], arr[top]);                                                |
//      size_t currentIndex = 0;                                                    |
//      size_t left = 2 * currentIndex + 1;                                         |
//      size_t right = 2 * currentIndex + 2;                                        |
//      while (((left < top) and (arr[left] > arr[currentIndex])) or                |
//              ((right < top) and (arr[right] > arr[currentIndex]))) {             |
//          if ((right >= top) or (arr[left] > arr[right])) {                       |
//              std::swap(arr[left], arr[currentIndex]);                            |
//              currentIndex = left;                                                |
//          } else {                                                                |
//              std::swap(arr[right], arr[currentIndex]);                           |
//              currentIndex = right;                                               |
//          }                                                                       |
//          left = 2 * currentIndex + 1;                                            |
//          right = 2 * currentIndex + 2;                                           |
//      }                                                                           |
//  }                                                                               |
//                                                                                  |
//      Нулевой и последний меняем местами ( 23 и 1 ), после этого находим индексы  |
//  дочерних НУЛЕВОГО. Индексы равны: текущий - 0, левый - 1, правый - 2, top = 11  |
//                                                                                  |
//                1                                                                 |
//             /      \                                                             |
//            16       17                                                           |
//           / \      / \                                                           |
//         13   14   8   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23                                                              |
//       Затем:                                                                     |
//  пока ИНДЕКС ЛЕВОГО < top И ЛЕВЫЙ ЭЛ-НТ > ТЕКУЩЕГО или ИНДЕКС ПРАВОГО <          |
//       top И ПРАВЫЙ ЭЛ-НТ > ТЕКУЩЕГО делаем следующее:                            |
//      если ПРАВОГО ЭЛ-ТА нет ИЛИ ЛЕВЫЙ ЭЛ-НТ > ПРАВОГО ЭЛ-ТА                      |
//          меняем местами ЛЕВЫЙ и ТЕКУЩИЙ                                          |
//          индекс ТЕКУЩЕГО становится равным индексу ЛЕВОГО                        |
//      иначе ( наш случай: правый больше левого ( 17 > 16 ) )                      |
//          меняем местами ПРАВЫЙ и ТЕКУЩИЙ                                         |
//          индекс ТЕКУЩЕГО становится равным индексу ПРАВОГО                       |
//      индекс ЛЕВОГО становится равными 2 * индекс ТЕКУЩЕГО + 1                    |
//      индекс ПРАВОГО становится равными 2 * индекс ТЕКУЩЕГО + 2                   |
//                                                                                  |
//                17                                                                |
//             /      \                                                             |
//            16       1                                                            |
//           / \      / \                                                           |
//         13   14   8   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23                                                              |
//      Индексы становятся равны: текущий - 2, левый - 5, правый - 6. top = 11      |
//      ЛЕВЫЙ (5) больше ТЕКУЩЕГО (2) - меняем местами                              |
//                                                                                  |
//                17                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 10 23                                                              |
//      Индексы равны: текущий - 5, левый - 11, правый - 12. Так как ЛЕВЫЙ индекс у |
// нас стал равным 11, а услови входа в while строго меньше top ( top = 11, у нас   |
// всего 11 индексов), то переходим выше в цикл for: уменьшаем top на 1, меняем     |
// местами НУЛЕВОЙ и ПРЕДПОСЛЕДНИЙ элементы:                                        |
//                                                                                  |
//                10                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23                                                              |
//      Индексы становятся равны: текущий - 0, левый - 1, правый - 2. top = 10      |
//      ЛЕВЫЙ (5) больше ТЕКУЩЕГО (2) - меняем местами                              |
//                                                                                  |
//                10                                                                |
//             /      \                                                             |
//            16       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23                                                              |
//      Индексы равны: текущий - 1, левый - 3, правый - 4. top = 10                 |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            10       8                                                            |
//           / \      / \                                                           |
//         13   14   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23                                                              |
//      ПРАВЫЙ (4) больше ТЕКУЩЕГО (1) - меняем местами                             |
//                                                                                  |
//                16                                                                |
//             /      \                                                             |
//            14       8                                                            |
//           / \      / \                                                           |
//         13   10   1   3                                                          |
//         / \ / \  /                                                               |
//        2 11 6 17 23                                                              |
//      Индексы равны: текущий - 4, левый - 9, правый - 10. top = 10                |
//  Переходим выше в цикл for: уменьшаем top на 1, меняем местами НУЛЕВОЙ и         |
//  ПЕРЕД ПРЕДПОСЛЕДНИМ элементы:                                                   |
//                                                                                  |
//                6                                                                 |
//             /      \                                                             |
//            14       8                                                            |
//           / \      / \                                                           |
//         13   10   1   3                                                          |
//        / \  / \  /                                                               |
//       2 11 16 17 23                                                              |
//      Индексы становятся равны: текущий - 0, левый - 1, правый - 2. top = 9       |
//      ЛЕВЫЙ (1) больше ТЕКУЩЕГО (0) - меняем местами                              |
//                14                                                                |
//             /      \                                                             |
//            6        8                                                            |
//           / \      / \                                                           |
//         13   10   1   3                                                          |
//        / \  / \  /                                                               |
//       2 11  16 17 23                                                             |
//      Индексы становятся равны: текущий - 1, левый - 3, правый - 4. top = 9       |
//      ЛЕВЫЙ (3) больше ТЕКУЩЕГО (1) - меняем местами                              |
//               14                                                                 |
//            /      \                                                              |
//           13       8                                                             |
//          / \      / \                                                            |
//         6   10   1   3                                                           |
//        / \  / \  /                                                               |
//       2 11 16 17 23                                                              |
//      Индексы становятся равны: текущий - 3, левый - 7, правый - 8. top = 9       |
//      В этой итерации больше метсами менять нечего                                |
//  Переходим выше в цикл for: уменьшаем top на 1, меняем местами НУЛЕВОЙ и         |
//  НЕ опечатка! -----> ПЕРЕД ПЕРЕД ПРЕДПОСЛЕДНИМ элементы:                         |
//               11                                                                 |
//            /      \                                                              |
//           13       8                                                             |
//          / \      / \                                                            |
//         6   10   1   3                                                           |
//        / \  / \  /                                                               |
//       2 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 0, левый - 1, правый - 2. top = 8       |
//      ЛЕВЫЙ (1) больше ТЕКУЩЕГО (0) - меняем местами                              |
//               13                                                                 |
//            /      \                                                              |
//           11       8                                                             |
//          / \      / \                                                            |
//         6   10   1   3                                                           |
//        / \  / \  /                                                               |
//       2 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 1, левый - 3, правый - 4. top = 8       |
//      В этой итерации больше метсами менять нечего                                |
//  Переходим выше в цикл for: уменьшаем top на 1, меняем местами НУЛЕВОЙ и         |
//  НЕ опечатка! -----> ПЕРЕД ПЕРЕД ПЕРЕД ПРЕДПОСЛЕДНИМ элементы:                   |
//                2                                                                 |
//             /      \                                                             |
//           11       8                                                             |
//          / \      / \                                                            |
//         6   10   1   3                                                           |
//        / \  / \  /                                                               |
//      13 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 0, левый - 1, правый - 2. top = 7       |
//      ЛЕВЫЙ (1) больше ТЕКУЩЕГО (0) - меняем местами                              |
//                11                                                                |
//            /       \                                                             |
//           2         8                                                            |
//          / \       / \                                                           |
//         6   10    1   3                                                          |
//        / \  / \   /                                                              |
//      13 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 1, левый - 3, правый - 4. top = 7       |
//      ПРАВЫЙ (4) больше ТЕКУЩЕГО (1) - меняем местами                             |
//                11                                                                |
//            /       \                                                             |
//           10        8                                                            |
//          /  \      / \                                                           |
//         6    2    1   3                                                          |
//        / \  / \   /                                                              |
//      13 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 4, левый - 9, правый - 10. top = 7      |
//  Переходим выше в цикл for: уменьшаем top на 1, меняем местами НУЛЕВОЙ и         |
//  НЕ опечатка! -----> ПЕРЕД ПЕРЕД ПЕРЕД ПЕРЕД ПРЕДПОСЛЕДНИМ элементы:             |
//                3                                                                 |
//            /       \                                                             |
//           10        8                                                            |
//          /  \      / \                                                           |
//         6    2    1   11                                                         |
//        / \  / \   /                                                              |
//      13 14 16 17 23                                                              |
//      Индексы становятся равны: текущий - 0, левый - 1, правый - 2. top = 7       |
//                                                                                  |
//  и так пока пока не упорядочится весь массив...                                  |
//__________________________________________________________________________________|

#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// создаем синоним типа
typedef int heapData_t;
// heapData_t - тип элемента в куче
// делается это для удобства, например: сейчас мне нужно, чтобы
// в куче были int'ы, а если вдруг я захочу чтобы были строки,
// я ТОЛЬКО ТУТ поменяю int на std::string
//
//-------------------------------------------------------------
//
// создаем прототипы функции
//

// ввод списка значений без терминального элемента
// из одной строки с разделителем - пробелом
std::vector<heapData_t> inputVector();

// пирамидальная сортировка массива
void heapSort(std::vector<heapData_t> &arr);

// распечатка вектора
void printVector(const std::vector<heapData_t> &arr);

int main(int argc, const char * argv[]) {
// создаем вектор
    std::vector<heapData_t> arr = inputVector();
// сортируем вектор
    heapSort(arr);
// распечатываем вектор
    printVector(arr);
    
    return 0;
}

//
// РЕАЛИЗАЦИИ ФУНКЦИЙ
//

std::vector<heapData_t> inputVector() {
    std::string line;
    getline(std::cin, line);
    std::stringstream lineStream(line);
    std::vector<heapData_t> arr;
    while (not lineStream.eof()) {
        heapData_t x;
        lineStream >> x;
        arr.push_back(x);
    }
    
    return arr;
}

void heapSort(std::vector<heapData_t> &arr) {
// если размер массива 1 - сортировать не нужно
// если размер массива 0 - его нет
// меньше 0 не может быть
    if (arr.size() <= 1)
        return;
    
    for (size_t k = 1; k < arr.size(); ++k) {
// подъем очередного элемента наверх
        size_t currentIndex = k;
        size_t parentIndex = (currentIndex - 1) / 2;
        while (currentIndex != 0 and arr[currentIndex] > arr[parentIndex]) {
            std::swap(arr[currentIndex], arr[parentIndex]);
            currentIndex = parentIndex;
            parentIndex = (currentIndex - 1) / 2;
       }
    }
    
    for (size_t top = (arr.size() - 1); top > 0; --top) {
        // меняем местами нулевой и ... сначала последний, в следующей
        // итерации - предпоследний, в следующей - перед предпоследним
        // и так до тех пор пока top > 0
        std::swap(arr[0], arr[top]);
        
        size_t currentIndex = 0;             // текущий элемент
        size_t left = 2 * currentIndex + 1;  // левый дочерний
        size_t right = 2 * currentIndex + 2; // правый дочерний
            
        // автоматически, так как уже проверяли в условии входа в цикл,
        // что левый дочерний существует и он больше текущего или правый
        // дочерний существует и он больше текущего
        while (((left < top) and (arr[left] > arr[currentIndex])) or
               ((right < top) and (arr[right] > arr[currentIndex]))) {
            // правого элемента не существует или левый больше правого
            if ((right >= top) or (arr[left] > arr[right])) { //оп. or - ленивый!
                std::swap(arr[left], arr[currentIndex]);
                currentIndex = left;
            } else {
                std::swap(arr[right], arr[currentIndex]);
                currentIndex = right;
            }
            left = 2 * currentIndex + 1;
            right = 2 * currentIndex + 2;
        }
    }
}

void printVector(const std::vector<heapData_t> &arr) {
    for (auto &x: arr) {
        std::cout << x << ' ';
    }
    std::cout << '\n';
}
