//
//  main.cpp
//
//  cppEdu
//
//  Created by Николай Кутузов on 14.09.2021.
//
//__________________________________________________________________________________
//                  РЕКУРСИЯ на примере БЫСТРОГО возведения в степень.              |
//                                                                                  |
//  Постановка задачи:                                                              |
//  Есть число a, которое нужно возвести в степень n. Первое, что приходит в голову |
//  1 * a * a * a... и так n раз. Ну как-то не очень :(                             |
//                                                                                  |
//  Можно попробовать решить рекуррентно,                                           |
//  тогда имеем:                                                                    |
//                        | a^0 = 1                если n = 0                       |
//                  a^n = | a * (a^(n - 1))        если n > 0                       |
//                        | значок "^" - возвести в степень                         |
//  НЕ быстро... НО! Процесс можно ускорить:                                        |
//  Есть правило:                                                                   |
//                  a^(b * c) = (a^b)^c = (a^c)^b                                   |
//  Рассмотрим пример:                                                              |
//                  a^(2*k)    =    (a^2)^k, а что теперь такое k?                  |
//                    /\                /\                                          |
//                    ||                ||                                          |
//               из a^(2*k) следует, что k - это число в два раза меньше 2*k        |
//  Теперь переносим на наш изначальный пример:                                     |
//  мы можем представить a^n как (a^2)^(n/2) Таким образов мы можем сократить       |
//  количество рекурсивыных вызовов - мы уменьшаем не на единицу, а сразу пополам!  |
//  Правда пополам только в случае, когда степень ЧЕТНАЯ!                           |
//                                                                                  |
//                        | a^0 = 1                если n = 0                       |
//                  a^n = | a * (a^(n - 1))        если n > 0 и НЕЧЕТНОЕ            |
//                        | (a^2)^(n/2)            если n > 0 и ЧЕТНОЕ              |
//                                                                                  |
//  Насколько быстрее произойдет подсчет относительно НЕбыстрого возведения?        |
//  Рассмотрим пример: 2 в степени 15:                                              |
//  2^15 -> 2^14 -> 2^13 ->2^12 -> 2^11 -> 2^10 ->2^9 ->                            |
//  2^8 -> 2^7 ->2^6 -> 2^5 -> 2^4 -> 2^3 ->2^2 -> 2^1 -> 2^0                       |
//                                                                                  |
//  А теперь тот же пример на БЫСТРОМ возведении:                                   |
//       a^(n-1)->(a^2)^(n/2) -> ... ->a^(n-1)->(a^2)^(n/2)->...                    |
//           ||     ||                   ||        ||                               |
//           \/     \/                   \/        \/                               |
//  2^15 -> 2^14 -> 4^7 ->4^6 -> 16^3 -> 16^2 -> 256^1 -> 256^0                     |
//                                                                                  |
//  Функция:                                                                        |
//                                                                                  |
//  double FastPOW(double inputNumber, int power){                                  |
//      if (power == 0) {                                                           |
//          return 1;                                                               |
//      } else if (power % 2 != 0){     // Если НЕчетное                            |
//          return FastPOW(inputNumber, power - 1) * inputNumber;                   |
//      } else {                        // Если четное                              |
//          return FastPOW(inputNumber * inputNumber, power / 2);                   |
//      }                                                                           |
//  }                                                                               |
//                                                                                  |
//  Как все происходит под капотом?                                                 |
//  Функция main() вызывает fastPow(2,17) -> идет проверка(17 % 2 != 0) ->          |
//  функция fastPow(2, 17) выполняет ->                                             |
//  -> return fastPow(2, 17-1)*2->call FastPow(2, 16)->идет проверка(16 % 2 == 0)-> |
//  функция fastPow(2, 16) выполняет ->                                             |
//  -> return fastPow(2*2, 16/2)->call FastPow(4, 8)->идет проверка(8 % 2 == 0)->   |
//  функция fastPow(4, 8) выполняет ->                                              |
//  -> return fastPow(4*4, 8/2)->call FastPow(16, 4)->идет проверка(4 % 2 == 0)->   |
//  функция fastPow(16, 4) выполняет->                                              |
//  -> return fastPow(16*16, 4/2)->call FastPow(256, 2)->идет проверка(2 % 2 == 0)->|
//  функция fastPow(256, 2) выполняет->                                             |
//  -> return fastPow(256*256, 2/2)->call FastPow(65536, 1)-> проверка(1 % 2 != 0)->|
//  функция fastPow(65536, 1) выполняет->                                           |
//  -> return fastPow(65536, 1-1)->call FastPow(65536, 0)->идет проверка(0 == 0) -> |
//  функция fastPow(65536, 0) выполняет->                                           |
//  -> return 1 в fastPow(65536, 1), так как fastPow(65536, 1) была вызвана из      |
//  условия:                                                                        |
//  } else if (power % 2 != 0){     // Если НЕчетное                                |
//          return FastPOW(inputNumber, power - 1) * inputNumber;                   |
//  то есть:                                                                        |
//                                                                                  |
//  } else if ((2 / 2) % 2 != 0){     // то есть 1 % 2 не равно нулю!               |
//          return FastPOW(65536, 1 - 1)   *   65536;                               |
//            /\          /\                    /\                                  |
//            ||          ||                    ||                                  |
//            \/          \/                    \/                                  |
//  значит возвращаем [единицу], умноженную на [65536] в ф-ию fastPow(256, 2), а там|
//  функция была вызвана из условия, где остаток от деления - 2 % 2  - равен нулю,  |
//  значит просто return FastPOW(inputNumber * inputNumber, power / 2);             |
//  то есть предыдущее значение 65536 возвращается в функцию fastPow(16, 4),        |
//  а там функция была вызвана из условия, где остаток от деления 4 % 2 равен нулю, |
//  значит просто return FastPOW(inputNumber * inputNumber, power / 2);             |
//  то есть предыдущее значение 65536 возвращается в функцию fastPow(4, 8),         |
//  а там функция была вызвана из условия, где остаток от деления 8 % 2 равен нулю, |
//  значит просто return FastPOW(inputNumber * inputNumber, power / 2);             |
//  то есть предыдущее значение 65536 возвращается в функцию fastPow(2, 16),        |
//  а там функция была вызвана из условия, где остаток от деления 16 % 2 равен нулю,|
//  то есть предыдущее значение 65536 возвращается в функцию fastPow(2, 17),        |
//  а там функция была вызвана из условия, где остаток от деления 17 % 2 НЕ РАВЕН   |
//  НУЛЮ, значит в функции FastPOW(2, 17) выполняется условие:                      |
//                                                                                  |
//  } else if (power % 2 != 0){     // Если НЕчетное                                |
//          return FastPOW(inputNumber, power - 1) * inputNumber;                   |
//                                                                                  |
//  !!!при этом помним, что в функцию FastPOW(2, 17) вернулось значение 65536!!!    |
//                                                                       \/         |
//  то есть:                         |<==================================<|         |
//                                   ||                                             |
//  } else if ((17 / 2) % 2 != 0){   \/        // 17 % 2 НЕ РАВНО НУЛЮ!             |
//              return FastPOW(2, 17 - 1)  *  2;                                    |
//               /\      /\                  /\                                     |
//               ||      ||                  ||                                     |
//               \/      \/                  \/                                     |
//  значит возвращаем [65536], умноженное на [2] в функцию main(), так как функция  |
//  FastPOW(2, 17) была вызвана из функции main().                                  |
//                                                                                  |
//  65536 * 2 = 131072, проверяем на калькуляторе и получаем, что 2^17 = 131072.    |
//__________________________________________________________________________________|

#include <iostream>

// объявление функции БЫСТРОГО возведения в степень
double FastPOW(double inputNumber, int power);

int main(int argc, const char * argv[]) {
    std::cout << "Введите число, которое нужно возвести в степень: ";
        double inputNumber;
        std::cin >> inputNumber;
        std::cout << "Введите степень, в которую нужно возвести число: ";
        int power;
        std::cin >> power;

        std::cout << "Число " << inputNumber << " в степени " <<
               power << " равно " << FastPOW(inputNumber, power);
        std::cout << std::endl;
    
    return 0;
}

double FastPOW(double inputNumber, int power){
    if (power == 0) {
        return 1;
    } else if (power % 2 != 0){     // Если НЕчетное
        return FastPOW(inputNumber, power - 1) * inputNumber;
    } else {                        // Если четное
        return FastPOW(inputNumber * inputNumber, power / 2);
    }
}
